name: CD workflow

on:
  push:
    branches:
      - 'master'

jobs:
  Docker-Tag:
    runs-on: ubuntu-latest
    steps:
    - name: 🔀 Checkout
      uses: actions/checkout@v3
    - name: 🖥️ Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: ⌨️ Set up Docker Build
      uses: docker/setup-buildx-action@v2
    - name: 🙍 Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: 🏗️ Build and push master
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Envs/Production/Dockerfile
        push: true
        tags: |
          ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKERHUB_REPONAME}}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:${{ github.sha }}

  Github-Versioning:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [Docker-Tag]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - id: release
        name: 🔏 Generates release and tag for code versioning
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          tag_prefix: v
          use_github_release_notes: true
      - name: 📣 Check versioning
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"

#  Deploy:
#    needs: [Docker-Tag]
#    runs-on: ubuntu-latest
#    steps:
#    - name: 🔀 Checkout
#      uses: actions/checkout@v3
#    - name: 🚀 Deploy on Production
#      uses: matheusvanzan/sshpass-action@v2
#      if: ${{ github.ref == 'refs/heads/master' }}
#      with:
#        host: ${{ secrets.PRODUCTION_SERVER_HOST }}
#        user: ${{ secrets.PRODUCTION_SERVER_USER }}
#        pass: ${{ secrets.PRODUCTION_SERVER_PASSWORD }}
#        run: |
#          echo "${{ secrets.PRODUCTION_ENV_FILE }}" > variables.env
#          docker stop $(docker ps -aqf "ancestor=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest")
#          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
#          docker run -d --env-file variables.env ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
#          rm -r -f variables.env

  Done:
    needs: [Deploy]
    runs-on: ubuntu-latest
    steps:
    - name: 🎉 Congratulations
      run: echo "Everything is updated! 🎉"
